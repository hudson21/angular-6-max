----------------------------(FOLDER 1. Getting Started)-----------------------------------
2. What is Angular ?
    Angular is a JavaScript Framework which allows you to create reactive 
    Single-Page-Applications (SPA)

5. Project Setup and First App
    - npm install -g @angular/cli@latest
    - ng new my-first-app

6. Editing the First App
    - import { FormsModule } from '@angular/forms'; --> app.module.ts
    - <input type='text' [(ngModel)]='name'> --> app.component.html

9. What is TypeScript ? 
    - More features than vanilla JS (e.g Types, Classes, Interfaces)

10. A Basic Project Setup using Bootstrap for Styling
    - npm install --save bootstrap@3
    - angular.json to add bootstrap directory to load the css styles
    - tsc typing

-------------------------------(FOLDER 2. The Basics)---------------------------------------
3. Components are Important
    - Keep in mind: Angular in the end is a JS framework, 
    changing your DOM ('HTML') at runtime.
4. 

7. Creating Components with the CLI
    - ng generate component servers

10. Fully Understanding the Component Selector
    - by Attribute: <div app-servers></div>
    - by selector: <app-server></app-server>
    - by Class: <div class="app-server"></div>

12. What is Databinding
    - Databinding = Communication    TypeScript Code(Business Logic) <---> Template (HTML)
    - TO make the communication between typeScript Code and Template (HTML) you can use:
        OutputData
        + String Interpolation ({{ data }})
        + Property Binding ([property]="data")

        React to (User) Events
        + Event Binding ((event)="expresion")

        Combination of Both 
        + Two-Way-Binding ([(ngModel)]="data")

13. String Interpolation
    + 

14. Event Binding
    - 

16. Event Binding
    - minute 03:36

17. Pasing and Using Data with Event Binding
    - <input 
        type='text'
        class='form-control'
        (input)='onUpdateServerName($event)'
      >
    - onUpdateServerName(event: Event) {
         this.serverName = (<HTMLInputElement>event.target).value;
      }

18. Two-Way-Data-Binding
    - 

21. Combining all Forms of Databinding
    - 

23. Understanding Directives
    - What are Directives ? : Instructions in the DOM

24. Using ngIf to Output Data Conditionally
    - 

25. Enhancing ngIf with an Else Condition
    - <p *ngIf="serverCreated; else noServer">Server was created, server nameis {{ serverName }}</p>
      <ng-template #noServer>
       <p> 
          No server was created
       </p>
      </ng-template>

26. Styling Elements Dynamically with ngStyle
    - <p [ngStyle]='{backgroundColor: getColor()}'>{{ serverId }} - {{ serverStatus }}</p>
    - 

27. Applying CSS Classes Dynamically with ngClass
    - <p 
       [ngStyle]="{backgroundColor: getColor()}"
       [ngClass]="{online: serverStatus === 'online'}"
      >
      {{ serverId }} - {{ serverStatus }}
      </p>
    
28. Outputting Lists with ngFor
    - <app-server *ngFor="let server of servers"></app-server>

-----------------------(FOLDER 3. Course Project - The Basics)-------------------------------
5. Creating the Components
    - ng g c recipes/recipe-list --spec false

6. Using the Components
    - 02:51

-------------------------------(FOLDER 4. Debugging)-----------------------------------------
1. Understanding Angular Error Messages
    - 
2. Debugging Code in the Browser Using Sourcemaps
    - the ts files can be found on the browser on : 
        1.Sources 
        2.webpack 
        3. . 
        4.src/(Here are the app components)

3. Using Auguryto Dive into Angular Apps 
    - https://augury.rangle.io/

---------------------(FOLDER 5.Components _ Databinding Deep Dive)---------------------------
4. Binding to Custom Properties  
    - The element var now is accesible to any parent 
      component that uses the app-server-element component
        @Input() element: { type:string, name:string, content:string};

    - <app-server-element 
        *ngFor="let serverElement of serverElements"
        [element]="serverElement"  
      >
      </app-server-element>

6. Binding to Customs Events
------------------------------<app.component.html>-------------------------------------
    - <app-cockpit 
        (serverCreated)="onServerAdded($event)"
        (bpCreated)='onBlueprintAdded($event)'
      >
      </app-cockpit>
------------------------------</app.component.html>------------------------------------

------------------------------<app.component.ts>---------------------------------------
    - serverElements = [{type:'server',name:'Testserver',content:'Just a test!'}];

    onServerAdded(serverData:{serverName: string, serverContent: string}) {
        this.serverElements.push({
        type: 'server',
        name: serverData.serverName,
        content: serverData.serverContent
        });
    }

    onBlueprintAdded(blueprintData:{blueprintName: string, blueprintContent: string}) {
        this.serverElements.push({
        type: 'blueprint',
        name: blueprintData.blueprintName,
        content: blueprintData.blueprintContent
        });
    }
-------------------------------</app.component.ts>--------------------------------------

--------------------------------<cockpit.component.ts>----------------------------------
@Output() serverCreated = new EventEmitter<{serverName: string, serverContent: string}>();
@Output('bpCreated') blueprintCreated = new EventEmitter<{blueprintName: string, blueprintContent: string}>();
newServerName = '';
newServerContent = '';

onAddServer() {
    this.serverCreated.emit({
      serverName: this.newServerName, 
      serverContent: this.newServerContent
    }); //Emits a new event of serverCreated listed above
  }

  onAddBlueprint() {
    this.blueprintCreated.emit({
      blueprintName: this.newServerName, 
      blueprintContent: this.newServerContent
    }); //Emits a new event of serverCreated listed above
  }

-------------------------------</cockpit.component.ts>---------------------------------------

10. More on View Encapsulation
    - import { ViewEncapsulation } from '@angular/core';
    - encapsulation: ViewEncapsulation. (
        Emulated: is the default configuration by Angular, 
        Native, 
        None: is used for applying styles globally, 
        ShadowDom)

11. Using Local references in Templates
    - <input 
      type="text" 
      class="form-control"
      #serverNameInput>

    - <button
      style="margin: 3px" 
      class="btn btn-primary"
      (click)="onAddServer(serverNameInput)">Add Server</button>

13. Projecting Contentinto Components with ng-content
    - ng-content is for adding content inside of the selector 
      (<app-component> here </app-component>)

14. Understanding the Component Lifecycle
    - Lifecycle: 
    1. ngOnChanges: Called after a bound input property changes 
    2. ngOnInit: Called once the component is initialized
    3. ngDoCheck: Called during every change detection run
    4. ngAfterContentInit: Called after content (ng-content) has been projected into View
    5. ngAfterContentChecked: Called every time the projected contenthas been checked 
    6. ngAfterViewInit: Called after the component's view (and child views) has been initialized
    7. ngAfterViewChecked: Called every time the view (and child views) have been checked
    8. ngOnDestroy: Called once the component is about to be destroyed

15. Seeing Lifecycle Hooks in Action

======================================== Structural Directives and Attributes Directives ===============================================

<li
 class="list-group-item"
 [ngClass]="{odd: odd % 2 !== 0}"
 [ngStyle]="{backgroundColor: odd % 2 !== 0 ? 'yellow' : 'transparent'}"
 *ngFor="let odd of oddNumbers">
    {{ odd }}
</li>

======================================== Creating a Basic Attribute Directive ==========================================================
basic-highlight.directive.ts

import { Directive, ElementRef, OnInit } from '@angular/core';

@Directive ({
    selector: '[appBasicHighlight]'
})

export class BasicHighlightDirective implements OnInit {
    constructor(private elementRef: ElementRef) {
    }

    ngOnInit() {
        this.elementRef.nativeElement.style.backgroundColor = 'green';
    }
}
----------------------------------------------------------------------
app.module

import { BasicHighlightDirective } from './directives/BasicHighlightDirective';

    declarations: [
        BasicHighlightDirective
    ]
------------------------------------------------------------------------    
app.component.html
<p appBasicHighlight>Style me with basic directive!</p>

++++++++++++++ command to create custom directives +++++++++++++++++++++
ng g directive name-of-the-directive

------------------------------------------------------------------------
import { 
    Directive,
    Renderer2, 
    OnInit, 
    ElementRef, 
    HostListener, 
    HostBinding, 
    Input }  from '@angular/core';

@Directive({
    selector: '[appBetterHighlightDirective]'
})
export class BetterHighlightDirective implements OnInit {
    @Input() defaultColor: string = 'transparent';
    @Input() highlightColor: string = 'blue';
    @HostBinding('style.backgroundColor') backgroundColor: string;

    constructor(private elRef:ElementRef, private renderer: Renderer2) {}

    ngOnInit() {
        this.backgroundColor = this.defaultColor;
        //this.renderer.setStyle(this.elRef.nativeElement, 'background-color', 'blue');
    }

    @HostListener('mouseenter') mouseover(eventData: Event) {
        //this.renderer.setStyle(this.elRef.nativeElement, 'background-color', 'blue', false, false);
        this.backgroundColor = this.highlightColor;
    }

    @HostListener('mouseleave') mouseleave(eventData: Event) {
        //this.renderer.setStyle(this.elRef.nativeElement, 'background-color', 'transparent', false, false);
        this.backgroundColor = this.defaultColor;
    }
}

------------------------------------------------------------------------    
app.component.html
<p appBetterHighlight
   [defaultColor]="'yellow'"
   [highlightColor]="'red'">Style me with a better directive!</p>


++++++++++++++++++++++++++++++++++ Command to create structural directives ++++++++++++++++++++++++++++++++++++++
ng g directive name-of-the-directive

import { Directive, Input, TemplateRef, ViewContainerRef } from '@angular/core';
@Directive({
    selector: '[appUnless]'
})
export class UnlessDirective {
    //This is just a set of the property
    @Input() set appUnless(condition: boolean) {
        if(!condition) {
            this.vcRef.createEmbeddedView(this.templateRef);
        }else {
            this.vcRef.clear();
        }
    } 
    constructor(private templateRef: TemplateRef<any>, private vcRef: ViewContainerRef) {}
}

++++++++++++++++++++++++++++++++++ Understanding ngSwitch +++++++++++++++++++++++++++++++++++++++++++++++++++++++++
<div [ngSwitch="value"]>
    <p *ngSwitchCase="5">Value is 5</p>
    <p *ngSwitchCase="10">Value is 10</p>
    <p *ngSwitchDefault>Value is Default</p>
</div>

================================== Creating a Service =============================================================
logging.service.ts


export class LoggingService {
    logStatusChage(status: string) {
        console.log('A server status changed, new status: ' + status);
    }
}

-----------------------------------------------------
import { Component } from '@angular/core';
import { LoggingService } from '../logging.service';
import { AccountService } from '../account.service';  

@Component({
    selector:'app-new-acount',
    templateUrl: './new-account.component.html',
    styleUrls: ['./new-account.component.css'],
    providers: [LoggingService, AccountService]
})
export class NewAccountComponent{

    constructor(private loggingService: LoggingService,
                private accountService: AccountService) {}

    onCreateAccount(accountName: string, accountStatus: string) {
        this.accountService.addAcount(accountName, accountStatus);
        this.loggingService.logStatusChage(accountStatus);
    }
}

--------------------------------------------------------------
account.service.ts

import { Injectable, EventEmitter } from '@angular/core';
import { LoggingService } from './logging.service'; 

@Injectable
export class AccountService {
    accounts = [
        {
            name. 'Master Account',
            status: 'active'
        },
        {
            name: 'Testaccount',
            status: 'inactive'
        },
        {
            name: 'Hidden Account',
            status: 'unknown'
        }
    ];
    statusUpdated = new EventEmitter<string>();

    addAcount(name: string, status: string) {
        this.accounts.push({name: name, status: status});
        this.loggingService.logStatusChage(status);
    }

    updateStatus(id: number, status: string) {
        this.accounts[id].status = status;
        this.loggingService.logStatusChage(status);
    }
}

-----------------------------------
app.component.ts

import { Component} from '@angular/core';
import { AccountService } from ''./accounts.service


@Component({
    selector: 'app-root',
    templateUrl: './app.component.html',
    styleUrls: ['./app.component.css'],
    providers: [AccountService]
})
export class AppComponent implements OnInit{
    accounts: {name: string, status: string}[] = [];

    constructor(private accountService: AccountService){ }

    ngOnInit() {
        this.accounts = this.accountService.accounts;
    }
}

---------------------------------------------------------------
import { Component } from '@angular/core';

import { LoggingService } from '../logging.service';
import { AccountService } from '../accounts.service';

@Component({
    selector: 'app-new-account',
    templateUrl. './new-account.component.html',
    styleUrls: ['./new-account.component.css']
})
export class NewAccountComponent {
    
    constructor(private loggingService: LoggingService,
                private accountService: AccountService) {
        this.accountService.statusUpdated.subscribe(
            (status: string) => alert('New Status: ' + status)
        );
    }
}

=====================================================================================
What is the benefit of register a service in app.module.ts individual component
in angular 4 ? 

When you add your service in the root providers of your application, 
all components will inject the same instance of the service. So only one 
instance will be created during the application. In this case you can 
keep state in your service.

When you add your service in the providers of your Component, 
every time a new instance of that component will be created, 
new instance of service also will be created. In this case you 
can't keep state in this type of service.

Depending on your logic provide where you need, but it's common 
case to provide all services in the root module.
=====================================================================================
Routes:
    <router-outlet></router-outlet>
<a routerLink="/servers"></a> //absolute path localhost/servers
<a routerLink="servers"></a> //relative path localhost/servers/servers

<li 
    role="presentation" 
    routerLinkActive="active"
    [routerLinkActiveOptions]="{exact: true}">
    <a routerLink="/">Home</a>
</li>

QueryParams Handling:
onEdit() {
    this.router.navigate(['edit'], 
    {relativeTo: this.route, queryParamsHandling: 'preserve'});
    //merge: to merge the old queryParams with the new ones 
    //preverve: override the old ones and to keep the new ones
  }

============================ Understanding Observables ==================================
What is an Observable ?
R. It is an object we import from a third party package like Rxjs. It follows the 
observable pattern (We have an observable and an observer). Between we have a stream 
(A timeline where we can have multiple events emitted by the observable)

Observer: It is the code that you implement: It is the subscribe function
Three ways of handling the data: 
    1. Handle Data
    2. Handle Error
    3. Handle Completion

+ npm install --save rxjs-compat

import {Observable} from 'rxjs/Rx'; // It is used when you use Observable methods

-------------- Where to learn more about Observables -------------------
reactive.io/rxjs/

Subject property: Observable and Observer at the same time

Operators in Observables: This operators allow you to transform the data you receive 
to something else and still stay inside of the Observable.

--------------------RxJs 6 without rxjs-compat----------------------------

============================== Forms ==========================================
Angular offers two approaches at the time of handling forms
1. Template-Driven: Angular infers the Form Object from the DOM
2. Reactive: Form is created programmatically and synchronized with the DOM

In app.module.ts --> import { FormsModule } from '@angular/forms';

Grouping Form Controls --> <div ngModelGroup="userData">
                            <input 
                                type="text"/>
                                ...
                           </div>


suggestUserName() {
    const suggestedName = 'Superuser';
    /*this.signupForm.setValue({
      userData: {
        username: suggestedName,
        email: '',
      },
      secret: 'pet',
      questionAnswer: '',
      gender: 'male'
    });*/
    this.signupForm.form.patchValue({
      userData: {
        username: suggestedName
      }
    });
}
setValue: Set all the values of the form
patchValue: Set specific values of your form

================================ Reactive Form Approach ==========================================
import { ReactiveFormsModule } from '@angular/forms';

imports: [ReactiveFormsModule]